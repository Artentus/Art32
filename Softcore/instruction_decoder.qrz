mod InstructionDecoder (
    in sig instruction: bits<32>,
    in sig instruction_16bit: bool,
    in sig instruction_valid: bool,

    in sig stall: bool,
    in sig hardware_interrupt: bool,
    in sig hardware_interrupt_slot: bits<4>,
    in sig current_interrupt_state: InterruptState,

    out sig decoded_instruction: DecodedInstruction,
    out sig immediate: bits<32>,
) {
    const ILLEGAL_INSTRUCTION_SLOT = 0x0;
    const ACCESS_VIOLATION_SLOT = 0x1;
    const UNALIGNED_ACCESS_SLOT = 0x2;
    const RESET_SLOT = 0xF;

    sig nop: DecodedInstruction;
    sig illegal_instruction: DecodedInstruction;
    comb {
        nop = DecodedInstruction {
            alu_op: AluOp::Nop,
            move_condition: Condition::Never,
            jump_condition: Condition::Never,
            load_flags: false,
            reg_lhs_select: REG_ZERO,
            reg_rhs_select: REG_ZERO,
            reg_load_select: REG_ZERO,
            interrupt_kind: InterruptKind::Exception,
            interrupt_slot: RESET_SLOT,
            load_ira: false,
            lhs_bus_source: LhsBusSource::Register,
            rhs_bus_source: RhsBusSource::Register,
            data_bus_source: DataBusSource::Execute,
            set_interrupt_state: false,
            new_interrupt_state: InterruptState::Servicing,
            mem_enable: false,
            mem_mode: match instruction[25..=26] {
                0x0 => MemoryMode::Bits32,
                0x1 => MemoryMode::Bits8,
                0x2 => MemoryMode::Bits16,
                0x3 => MemoryMode::IO,
            },
            mem_sign_ext: instruction[24],
            mem_write: instruction[6],
            mem_reserve: false,
        };

        illegal_instruction = nop;
        illegal_instruction.jump_condition = Condition::Always;
        illegal_instruction.interrupt_slot = match current_interrupt_state {
            InterruptState::Servicing => RESET_SLOT, // illegal instructions inside interrupt handlers cause a system reset
            InterruptState::Listening => ILLEGAL_INSTRUCTION_SLOT,
        };
        illegal_instruction.load_ira = true;
        illegal_instruction.lhs_bus_source = LhsBusSource::Interrupt;
        illegal_instruction.set_interrupt_state = true;
        illegal_instruction.new_interrupt_state = InterruptState::Servicing;
    }

    sig branch_cond: Condition;
    comb {
        branch_cond = match instruction[12..=14] {
            0x0 => Condition::Equal,
            0x1 => Condition::NotEqual,
            0x2 => Condition::UnsignedLessThan,
            0x3 => Condition::UnsignedGreaterOrEqual,
            0x4 => Condition::SignedLessThan,
            0x5 => Condition::SignedGreaterOrEqual,
            0x6 => Condition::Always,
            0x7 => Condition::Always,
        };
    }

    sig alu_op_16: AluOp;
    comb {
        alu_op_16 = match instruction[5..=7] {
            0x0 => AluOp::Add,
            0x1 => AluOp::Sub,
            0x2 => AluOp::And,
            0x3 => AluOp::Or,
            0x4 => AluOp::Xor,
            0x5 => AluOp::Shl,
            0x6 => AluOp::Lsr,
            0x7 => AluOp::Asr,
        };
    }

    sig alui_op_16: AluOp;
    comb {
        alui_op_16 = match instruction[5..=6] {
            0x0 => AluOp::Xor,
            0x1 => AluOp::Shl,
            0x2 => AluOp::Lsr,
            0x3 => AluOp::Asr,
        };
    }

    sig move_cond_16: Condition;
    comb {
        move_cond_16 = match instruction[5..=7] {
            0x0 => Condition::Equal,
            0x1 => Condition::NotEqual,
            0x2 => Condition::UnsignedLessThan,
            0x3 => Condition::UnsignedGreaterOrEqual,
            0x4 => Condition::SignedLessThan,
            0x5 => Condition::SignedGreaterOrEqual,
            0x6 => Condition::Always,
            0x7 => Condition::Never,
        };
    }

    sig alu_op_32: AluOp;
    comb {
        alu_op_32 = match instruction[24..=26] {
            0x0 => AluOp::Add,
            0x1 => AluOp::Sub,
            0x2 => AluOp::And,
            0x3 => AluOp::Or,
            0x4 => AluOp::Xor,
            0x5 => AluOp::Shl,
            0x6 => AluOp::Lsr,
            0x7 => AluOp::Asr,
        };
    }

    sig move_cond_32: Condition;
    comb {
        move_cond_32 = match instruction[24..=26] {
            0x0 => Condition::Equal,
            0x1 => Condition::NotEqual,
            0x2 => Condition::UnsignedLessThan,
            0x3 => Condition::UnsignedGreaterOrEqual,
            0x4 => Condition::SignedLessThan,
            0x5 => Condition::SignedGreaterOrEqual,
            0x6 => Condition::Always,
            0x7 => Condition::Never,
        };
    }

    sig aluc_op: AluOp;
    comb {
        aluc_op = match instructon[24] {
            0x0 => AluOp::AddC,
            0x1 => AluOp::SubC,
        };
    }

    sig muldiv_op: AluOp;
    comb {
        muldiv_op = match instruction[24..=26] {
            0x0 => AluOp::Mul,
            0x1 => AluOp::MulHuu,
            0x2 => AluOp::MulHss,
            0x3 => AluOp::MulHus,
            0x4 => AluOp::Divu,
            0x5 => AluOp::Divs,
            0x6 => AluOp::Remu,
            0x7 => AluOp::Rems,
        };
    }

    comb {
        decoded_instruction = nop;
        immediate = 0;
        
        if hardware_interrupt & (current_interrupt_state == InterruptState::Listening) {
            decoded_instruction.jump_condition = Condition::Always;
            decoded_instruction.interrupt_kind = InterruptKind::Hardware;
            decoded_instruction.interrupt_slot = hardware_interrupt_slot;
            decoded_instruction.load_ira = true;
            decoded_instruction.lhs_bus_source = LhsBusSource::Interrupt;
            decoded_instruction.set_interrupt_state = true;
            decoded_instruction.new_interrupt_state = InterruptState::Servicing;
        } else if instruction_valid & !stall {
            if instruction[0] == 0 {
                match instruction[1] {
                    0 /* ldi */ => {
                        decoded_instruction.alu_op = AluOp::Cond;
                        decoded_instruction.move_condition = Condition::Always;
                        decoded_instruction.reg_load_select = instruction[12..=15] as bits::<5>;
                        decoded_instruction.rhs_bus_source = RhsBusSource::Immediate;
                        immediate = (
                            instruction[3]
                            @ instruction[4..=6]
                            @ instruction[2]
                            @ instruction[7..=11]
                            @ (0 as bits::<22>)
                        ) >>> 22;
                    },
                    1 /* addi */ => {
                        decoded_instruction.alu_op = AluOp::Add;
                        decoded_instruction.load_flags = true;
                        decoded_instruction.reg_lhs_select = instruction[12..=15] as bits::<5>;
                        decoded_instruction.reg_load_select = instruction[12..=15] as bits::<5>;
                        decoded_instruction.rhs_bus_source = RhsBusSource::Immediate;
                        immediate = (
                            instruction[3]
                            @ instruction[4..=6]
                            @ instruction[2]
                            @ instruction[7..=11]
                            @ (0 as bits::<22>)
                        ) >>> 22;
                    },
                }
            } else if instruction[1] == 0 {
                match instruction[2] {
                    0 /* j */ => {
                        decoded_instruction.jump_condition = Condition::Always;
                        decoded_instruction.reg_lhs_select = instruction[12..=15] as bits::<5>;
                        immediate = (
                            instruction[3]
                            @ instruction[4..=6]
                            @ instruction[7]
                            @ instruction[8..=11]
                            @ (0 as bits::<23>)
                        ) >>> 22;
                    },
                    1 /* jl */ => {
                        decoded_instruction.alu_op = AluOp::Cond;
                        decoded_instruction.move_condition = Condition::Always;
                        decoded_instruction.jump_condition = Condition::Always;
                        decoded_instruction.reg_lhs_select = instruction[12..=15] as bits::<5>;
                        decoded_instruction.reg_load_select = REG_RA;
                        decoded_instruction.rhs_bus_source = RhsBusSource::ProgramCounter;
                        immediate = (
                            instruction[3]
                            @ instruction[4..=6]
                            @ instruction[7]
                            @ instruction[8..=11]
                            @ (0 as bits::<23>)
                        ) >>> 22;
                    },
                }
            } else if instruction[2] == 0 {
                match instruction[7] {
                    0 /* branch16 */ => {
                        decoded_instruction.jump_condition = branch_cond;
                        decoded_instruction.lhs_bus_source = LhsBusSource::ProgramCounter;
                        immediate = (
                            instruction[3]
                            @ instruction[4..=6]
                            @ instruction[15]
                            @ instruction[8..=11]
                            @ (0 as bits::<23>)
                        ) >>> 22;

                        if instruction[12..=14] == 0x7 {
                            decoded_instruction.alu_op = AluOp::Cond;
                            decoded_instruction.move_condition = Condition::Always;
                            decoded_instruction.reg_load_select = REG_RA;
                            decoded_instruction.rhs_bus_source = RhsBusSource::ProgramCounter;
                        }
                    },
                    1 => match instruction[3] {
                        0 /* ldui */ => {
                            decoded_instruction.alu_op = AluOp::Cond;
                            decoded_instruction.move_condition = Condition::Always;
                            decoded_instruction.reg_load_select = instruction[12..=16];
                            decoded_instruction.rhs_bus_source = RhsBusSource::Immediate;
                            immediate = instruction[27..=31]
                                @ instruction[8..=11]
                                @ instruction[4..=6]
                                @ instruction[17..=21]
                                @ instruction[22..=23]
                                @ instruction[24..=26]
                                @ (0 as bits::<10>);
                        },
                        1 /* apcui */ => {
                            decoded_instruction.alu_op = AluOp::Add;
                            decoded_instruction.reg_load_select = instruction[12..=16];
                            decoded_instruction.lhs_bus_source = LhsBusSource::ProgramCounter;
                            decoded_instruction.rhs_bus_source = RhsBusSource::Immediate;
                            immediate = instruction[27..=31]
                                @ instruction[8..=11]
                                @ instruction[4..=6]
                                @ instruction[17..=21]
                                @ instruction[22..=23]
                                @ instruction[24..=26]
                                @ (0 as bits::<10>);
                        },
                    },
                }
            } else {
                match instruction[3..=4] {
                    0 /* alu16 */ => {
                        decoded_instruction.alu_op = alu_op_16;
                        decoded_instruction.load_flags = true;
                        decoded_instruction.reg_lhs_select = instruction[12..=15] as bits::<5>;
                        decoded_instruction.reg_rhs_select = instruction[8..=11] as bits::<5>;
                        decoded_instruction.reg_load_select = instruction[12..=15] as bits::<5>;
                    },
                    1 /* mov16 */ => {
                        decoded_instruction.alu_op = AluOp::Cond;
                        decoded_instruction.move_condition = move_cond_16;
                        decoded_instruction.reg_lhs_select = instruction[12..=15] as bits::<5>;
                        decoded_instruction.reg_rhs_select = instruction[8..=11] as bits::<5>;
                        decoded_instruction.reg_load_select = instruction[12..=15] as bits::<5>;
                    },
                    2 => if instruction[5..=6] == 0 {
                        match instruction[7] {
                            0 /* cmp16 */ => {
                                decoded_instruction.alu_op = AluOp::Sub;
                                decoded_instruction.load_flags = true;
                                decoded_instruction.reg_lhs_select = instruction[12..=15] as bits::<5>;
                                decoded_instruction.reg_rhs_select = instruction[8..=11] as bits::<5>;
                            },
                            1 => {
                                match instruction[8..=11] {
                                    0x0 /* ret */ => {
                                        decoded_instruction.jump_condition = Condition::Always;
                                        decoded_instruction.reg_lhs_select = REG_RA;
                                    },
                                    0x1 /* sysret */ => {
                                        match current_interrupt_state {
                                            InterruptState::Servicing => {
                                                decoded_instruction.jump_condition = Condition::Always;
                                                decoded_instruction.lhs_bus_source = LhsBusSource::Ira;
                                                decoded_instruction.set_interrupt_state = true;
                                                decoded_instruction.new_interrupt_state = InterruptState::Listening;
                                            },
                                            InterruptState::Listening => {
                                                decoded_instruction = illegal_instruction;
                                            },
                                        }
                                    },
                                    0x2 /* fence */ => {
                                        // NOP on a system with no data cache
                                    },
                                    0x3 /* ifence */ => {
                                        // NOP on a system with no instruction cache
                                    },
                                    0x4..=0xD => {
                                        decoded_instruction = illegal_instruction;
                                    },
                                    0xE /* envcall */ => {
                                        // NOP on bare metal
                                    },
                                    0xF /* syscall */ => {
                                        match current_interrupt_state {
                                            InterruptState::Servicing => {
                                                decoded_instruction = illegal_instruction;
                                            },
                                            InterruptState::Listening => {
                                                decoded_instruction.jump_condition = Condition::Always;
                                                decoded_instruction.interrupt_kind = InterruptKind::Software;
                                                decoded_instruction.interrupt_slot = instruction[12..=15];
                                                decoded_instruction.load_ira = true;
                                                decoded_instruction.lhs_bus_source = LhsBusSource::Interrupt;
                                                decoded_instruction.set_interrupt_state = true;
                                                decoded_instruction.new_interrupt_state = InterruptState::Servicing;
                                            },
                                        }
                                    },
                                }
                            },
                        }
                    } else /* alui16 */ {
                        decoded_instruction.alu_op = alui_op_16;
                        decoded_instruction.load_flags = true;
                        decoded_instruction.reg_lhs_select = instruction[12..=15] as bits::<5>;
                        decoded_instruction.reg_load_select = instruction[12..=15] as bits::<5>;
                        decoded_instruction.rhs_bus_source = RhsBusSource::Immediate;
                        immediate = instruction[7..=11] as bits::<32>;
                    },
                    3 => match instruction[5] {
                        0 => match instruction[6] {
                            0 /* ld.32 [sp] */ => {
                                decoded_instruction.reg_lhs_select = REG_SP;
                                decoded_instruction.reg_load_select = instruction[12..=15] as bits::<5>;
                                decoded_instruction.data_bus_source = DataBusSource::Memory;
                                decoded_instruction.mem_enable = true;
                                immediate = (instruction[7..=8] @ instruction[9..=11] @ (0 as bits::<2>)) as bits::<32>;
                            },
                            1 /* st.32 [sp] */ => {
                                decoded_instruction.reg_lhs_select = REG_SP;
                                decoded_instruction.reg_rhs_select = instruction[12..=15] as bits::<5>;
                                decoded_instruction.mem_enable = true;
                                immediate = (instruction[7..=8] @ instruction[9..=11] @ (0 as bits::<2>)) as bits::<32>;
                            },
                        },
                        1 => match instruction[22..=23] {
                            0b00 => {
                                match instruction[6] {
                                    0 /* jl */ => {
                                        decoded_instruction.alu_op = AluOp::Cond;
                                        decoded_instruction.move_condition = Condition::Always;
                                        decoded_instruction.jump_condition = Condition::Always;
                                        decoded_instruction.reg_lhs_select = instruction[17..=21];
                                        decoded_instruction.reg_load_select = instruction[12..=16];
                                        decoded_instruction.rhs_bus_source = RhsBusSource::ProgramCounter;
                                        immediate = (
                                            instruction[31]
                                            @ instruction[24..=26]
                                            @ instruction[7]
                                            @ instruction[27..=30]
                                            @ instruction[8..=11]
                                            @ (0 as bits::<19>)
                                        ) >> 18;
                                    },
                                    1 /* branch32 */ => {
                                        decoded_instruction.jump_condition = branch_cond;
                                        decoded_instruction.lhs_bus_source = LhsBusSource::ProgramCounter;
                                        immediate = (
                                            instruction[31]
                                            @ instruction[15..=21]
                                            @ instruction[24..=26]
                                            @ instruction[7]
                                            @ instruction[27..=30]
                                            @ instruction[8..=11]
                                            @ (0 as bits::<12>)
                                        ) >> 11;

                                        if instruction[12..=14] == 0x7 {
                                            decoded_instruction.alu_op = AluOp::Cond;
                                            decoded_instruction.move_condition = Condition::Always;
                                            decoded_instruction.reg_load_select = REG_RA;
                                            decoded_instruction.rhs_bus_source = RhsBusSource::ProgramCounter;
                                        }
                                    },
                                }
                            },
                            0b01 => {
                                match instruction[6] {
                                    0 /* alui32 */ => {
                                        decoded_instruction.alu_op = alu_op_32;
                                        decoded_instruction.load_flags = true;
                                        decoded_instruction.reg_lhs_select = instruction[17..=21];
                                        decoded_instruction.reg_load_select = instruction[12..=16];
                                        decoded_instruction.rhs_bus_source = RhsBusSource::Immediate;
                                        immediate = (
                                            instruction[27..=31]
                                            @ instruction[7..=11]
                                            @ (0 as bits::<22>)
                                        ) >>> 22;
                                    },
                                    1 /* movi32 */ => {
                                        decoded_instruction.alu_op = AluOp::Cond;
                                        decoded_instruction.move_condition = move_cond_32;
                                        decoded_instruction.reg_lhs_select = instruction[17..=21];
                                        decoded_instruction.reg_load_select = instruction[12..=16];
                                        decoded_instruction.rhs_bus_source = RhsBusSource::Immediate;
                                        immediate = (
                                            instruction[27..=31]
                                            @ instruction[7..=11]
                                            @ (0 as bits::<22>)
                                        ) >>> 22;
                                    },
                                }
                            },
                            0b10 => {
                                match instruction[6] {
                                    0 /* load */ => {
                                        decoded_instruction.reg_lhs_select = instruction[17..=21];
                                        decoded_instruction.reg_load_select = instruction[12..=16];
                                        decoded_instruction.data_bus_source = DataBusSource::Memory;
                                        decoded_instruction.mem_enable = true;
                                        immediate = (
                                            instruction[27..=31]
                                            @ instruction[7..=11]
                                            @ (0 as bits::<22>)
                                        ) >>> 22;
                                    },
                                    1 /* store */ => {
                                        decoded_instruction.reg_lhs_select = instruction[17..=21];
                                        decoded_instruction.reg_rhs_select = instruction[7] @ instruction[8..=11];
                                        decoded_instruction.mem_enable = true;
                                        immediate = (
                                            instruction[27..=31]
                                            @ instruction[12..=16]
                                            @ (0 as bits::<22>)
                                        ) >>> 22;
                                    },
                                }
                            },
                            0b11 => match instruction[27..=31] @ instruction[6] {
                                0b000000 /* alu32 */ => {
                                    decoded_instruction.alu_op = alu_op_32;
                                    decoded_instruction.load_flags = true;
                                    decoded_instruction.reg_lhs_select = instruction[17..=21];
                                    decoded_instruction.reg_rhs_select = instruction[7] @ instruction[8..=11];
                                    decoded_instruction.reg_load_select = instruction[12..=16];
                                },
                                0b000001 /* mov32 */ => {
                                    decoded_instruction.alu_op = AluOp::Cond;
                                    decoded_instruction.move_condition = move_cond_32;
                                    decoded_instruction.reg_lhs_select = instruction[17..=21];
                                    decoded_instruction.reg_rhs_select = instruction[7] @ instruction[8..=11];
                                    decoded_instruction.reg_load_select = instruction[12..=16];
                                },
                                0b000010 => {
                                    if instruction[25..=26] == 0 /* aluc */ {
                                        decoded_instruction.alu_op = aluc_op;
                                        decoded_instruction.load_flags = true;
                                        decoded_instruction.reg_lhs_select = instruction[17..=21];
                                        decoded_instruction.reg_rhs_select = instruction[7] @ instruction[8..=11];
                                        decoded_instruction.reg_load_select = instruction[12..=16];
                                    } else {
                                        decoded_instruction = illegal_instruction;
                                    }
                                },
                                0b000011 /* muldiv */ => {
                                    decoded_instruction.alu_op = muldiv_op;
                                    decoded_instruction.load_flags = true;
                                    decoded_instruction.reg_lhs_select = instruction[17..=21];
                                    decoded_instruction.reg_rhs_select = instruction[7] @ instruction[8..=11];
                                    decoded_instruction.reg_load_select = instruction[12..=16];
                                },
                                0b000100 /* fpu3 */ => {
                                    // TODO
                                    decoded_instruction = illegal_instruction;
                                },
                                0b000101 /* fpu2 */ => {
                                    // TODO
                                    decoded_instruction = illegal_instruction;
                                },
                                0b000110 /* fcmp */ => {
                                    // TODO
                                    decoded_instruction = illegal_instruction;
                                },
                                0b000111 /* cvt */ => {
                                    // TODO
                                    decoded_instruction = illegal_instruction;
                                },
                                0b001000 | 0b001010 | 0b001100 | 0b001110 /* load reserve */ => {
                                    // ordering does not matter on a system without cache
                                    decoded_instruction.reg_lhs_select = instruction[17..=21];
                                    decoded_instruction.reg_load_select = instruction[12..=16];
                                    decoded_instruction.data_bus_source = DataBusSource::Memory;
                                    decoded_instruction.mem_enable = true;
                                    decoded_instruction.mem_reserve = true;
                                },
                                0b001001 | 0b001011 | 0b001101 | 0b001111 /* store conditional */ => {
                                    // ordering does not matter on a system without cache
                                    decoded_instruction.reg_lhs_select = instruction[17..=21];
                                    decoded_instruction.reg_rhs_select = instruction[7] @ instruction[8..=11];
                                    decoded_instruction.reg_load_select = instruction[12..=16];
                                    decoded_instruction.data_bus_source = DataBusSource::Stc;
                                    decoded_instruction.mem_enable = true;
                                },
                                0b010000..=0b111111 => {
                                    decoded_instruction = illegal_instruction;
                                },
                            },
                        },
                    },
                }
            }
        }
    }
}
