//enum FRecipState {
//    Approx,
//    Iter1A,
//    Iter1B,
//    Iter1C,
//    Iter1D,
//    Iter2A,
//    Iter2B,
//    Iter2C,
//    Iter2D,
//    Iter3A,
//    Iter3B,
//    Iter3C,
//    Iter3D,
//}
//
//mod FRecip (
//    in sig value: bits<32>,
//    out reg result: bits<32>,
//
//    in sig start: bit,
//    out reg busy: bit,
//
//    in sig reset: bit,
//    in sig clk: bit,
//) {
//    sig mult_lhs: bits<32>;
//    let mult_lhs_unpack: F32Unpack;
//    comb {
//        mult_lhs_unpack.p = mult_lhs;
//    }
//
//    sig mult_rhs: bits<32>;
//    let mult_rhs_unpack: F32Unpack;
//    comb {
//        mult_rhs_unpack.p = mult_rhs;
//    }
//
//    let mult: FMul;
//    comb {
//        mult.lhs = mult_lhs_unpack.u;
//        mult.rhs = mult_rhs_unpack.u;
//    }
//
//    sig value_magic: bits<32>;
//    comb {
//        // Bit magic from https://stackoverflow.com/a/39714493
//        value_magic = (0xBE6EB3BE - value_abs) >> 1;
//    }
//
//    reg value_sign: bit;
//    reg value_abs: bits<32>;
//    reg approx: bits<32>;
//
//    reg state: FRecipState;
//
//    comb {
//        match state {
//            FRecipState::Approx => {
//                mult_lhs = value_magic;
//                mult_rhs = value_magic;
//            },
//            FRecipState::Iter1A
//            | FRecipState::Iter2A
//            | FRecipState::Iter3A => {
//                mult_lhs = value_abs;
//                mult_rhs = approx;
//            },
//            FRecipState::Iter1B | FRecipState::Iter1C
//            | FRecipState::Iter2B | FRecipState::Iter2C
//            | FRecipState::Iter3B | FRecipState::Iter3C => {
//                mult_lhs = 0 as bits::<32>;
//                mult_rhs = 0 as bits::<32>;
//            },
//            FRecipState::Iter1D
//            | FRecipState::Iter2D
//            | FRecipState::Iter3D => {
//                mult_lhs = result;
//                mult_rhs = approx;
//            },
//        }
//    }
//
//    proc rising(clk) {
//        if reset {
//            busy = 0 as bit;
//            state = FRecipState::Approx;
//        } else {
//            match state {
//                FRecipState::Approx => {
//                    if start {
//                        value_sign = value[31];
//                        value_abs = (0 as bit) @ value[0..31];
//                        approx = mult.result;
//
//                        busy = 1 as bit;
//                        state = FRecipState::Iter1A;
//                    } else {
//                        busy = 0 as bit;
//                        state = FRecipState::Approx;
//                    }
//                },
//                FRecipState::Iter1A => {
//                    result = mult.result;
//
//                    busy = 1 as bit;
//                    state = FRecipState::Iter1B;
//                },
//                FRecipState::Iter1B => {
//                    busy = 1 as bit;
//                    state = FRecipState::Iter1C;
//                },
//                FRecipState::Iter1C => {
//                    busy = 1 as bit;
//                    state = FRecipState::Iter1D;
//                },
//                FRecipState::Iter1D => {
//                    approx = mult.result;
//
//                    busy = 1 as bit;
//                    state = FRecipState::Iter2A;
//                },
//                FRecipState::Iter2A => {
//                    result = mult.result;
//
//                    busy = 1 as bit;
//                    state = FRecipState::Iter2B;
//                },
//                FRecipState::Iter2B => {
//                    busy = 1 as bit;
//                    state = FRecipState::Iter2C;
//                },
//                FRecipState::Iter2C => {
//                    busy = 1 as bit;
//                    state = FRecipState::Iter2D;
//                },
//                FRecipState::Iter2D => {
//                    approx = mult.result;
//
//                    busy = 1 as bit;
//                    state = FRecipState::Iter3A;
//                },
//                FRecipState::Iter3A => {
//                    result = mult.result;
//
//                    busy = 1 as bit;
//                    state = FRecipState::Iter3B;
//                },
//                FRecipState::Iter3B => {
//                    busy = 1 as bit;
//                    state = FRecipState::Iter3C;
//                },
//                FRecipState::Iter3C => {
//                    busy = 1 as bit;
//                    state = FRecipState::Iter3D;
//                },
//                FRecipState::Iter3D => {
//                    result = mult.result;
//
//                    busy = 0 as bit;
//                    state = FRecipState::Approx;
//                },
//            }
//        }
//    }
//}
