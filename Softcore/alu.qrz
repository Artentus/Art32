enum AluOp: bits<5> {
    Add    = 0x00,
    Sub    = 0x01,
    And    = 0x02,
    Or     = 0x03,
    Xor    = 0x04,
    Shl    = 0x05,
    Lsr    = 0x06,
    Asr    = 0x07,
    AddC   = 0x08,
    SubC   = 0x09,
    Mul    = 0x10,
    MulHuu = 0x11,
    MulHss = 0x12,
    MulHus = 0x13,
    Divu   = 0x14,
    Divs   = 0x15,
    Remu   = 0x16,
    Rems   = 0x17,
    Cond   = 0x18,
}

enum AluState: bits<8> {
    Ready,
    DivShift,
    DivFinalize,
}

mod Alu (
    in sig lhs: bits<32>,
    in sig rhs: bits<32>,
    
    in sig op: AluOp,
    in sig start: bool,
    in sig flags: Flags,
    in sig condition: Condition,

    out reg result: bits<32>,
    out sig next_flags: Flags,
    out sig ready: bool,

    in sig enable: bool,
    in sig reset: bool,
    in sig clk: bit,
) {
    reg counter: bits<5>;
    sig next_counter: bits<5>;
    proc rising(clk) {
        if enable {
            counter = next_counter;
        }
    }

    reg numerator: bits<32>;
    reg denominator: bits<32>;
    reg quotient: bits<32>;
    reg remainder: bits<32>;
    sig next_numerator: bits<32>;
    sig next_denominator: bits<32>;
    sig next_quotient: bits<32>;
    sig next_remainder: bits<32>;
    proc rising(clk) {
        if enable {
            numerator = next_numerator;
            denominator = next_denominator;
            quotient = next_quotient;
            remainder = next_remainder;
        }
    }

    sig next_result: bits<32>;
    proc rising(clk) {
        if enable {
            result = next_result;
        }
    }

    reg state: AluState;
    sig next_state: AluState;
    proc rising(clk) {
        if reset {
            state = AluState::Ready;
        } else if enable {
            state = next_state;
        }
    }

    comb {
        ready = state == AluState::Ready;
    }

    let add: Adder<32>;
    comb {
        add.lhs = lhs;
        add.rhs = rhs;
        add.carry_in = flags.carry;
    }

    let mul: Mult32;
    comb {
        mul.lhs = lhs;
        mul.rhs = rhs;
    }

    let cond: ConditionUnit;
    comb {
        cond.flags = flags;
        cond.condition = condition;
    }

    sig and_result: bits<32>;
    sig or_result: bits<32>;
    sig xor_result: bits<32>;
    sig shl_result: bits<32>;
    sig lsr_result: bits<32>;
    sig asr_result: bits<32>;
    comb {
        and_result = lhs & rhs;
        or_result = lhs | rhs;
        xor_result = lhs ^ rhs;
        shl_result = lhs << rhs;
        lsr_result = lhs >> rhs;
        asr_result = lhs >>> rhs;
    }

    comb {
        add.op = AdderOp::Add;
        mul.op = MultOp::MulUU;

        next_counter = counter;
        next_numerator = numerator;
        next_denominator = denominator;
        next_quotient = quotient;
        next_remainder = remainder;
        next_result = result;
        next_flags = flags;
        next_state = state;

        match state {
            AluState::Ready => {
                if start {
                    match op {
                        AluOp::Add => {
                            add.op = AdderOp::Add;

                            next_result = add.result;
                            next_flags = Flags {
                                carry: add.carry_out,
                                zero: add.result == 0,
                                sign: add.sign,
                                overflow: add.overflow,
                            };
                            next_state = AluState::Ready;
                        },
                        AluOp::Sub => {
                            add.op = AdderOp::Sub;

                            next_result = add.result;
                            next_flags = Flags {
                                carry: add.carry_out,
                                zero: add.result == 0,
                                sign: add.sign,
                                overflow: add.overflow,
                            };
                            next_state = AluState::Ready;
                        },
                        AluOp::And => {
                            next_result = and_result;
                            next_flags.zero = and_result == 0;
                            next_state = AluState::Ready;
                        },
                        AluOp::Or => {
                            next_result = or_result;
                            next_flags.zero = or_result == 0;
                            next_state = AluState::Ready;
                        },
                        AluOp::Xor => {
                            next_result = xor_result;
                            next_flags.zero = xor_result == 0;
                            next_state = AluState::Ready;
                        },
                        AluOp::Shl => {
                            next_result = shl_result;
                            next_flags.zero = shl_result == 0;
                            next_state = AluState::Ready;
                        },
                        AluOp::Lsr => {
                            next_result = lsr_result;
                            next_flags.zero = lsr_result == 0;
                            next_state = AluState::Ready;
                        },
                        AluOp::Asr => {
                            next_result = asr_result;
                            next_flags.zero = asr_result == 0;
                            next_state = AluState::Ready;
                        },
                        AluOp::AddC => {
                            add.op = AdderOp::AddC;

                            next_result = add.result;
                            next_flags = Flags {
                                carry: add.carry_out,
                                zero: (add.result == 0) & flags.zero,
                                sign: add.sign,
                                overflow: add.overflow,
                            };
                            next_state = AluState::Ready;
                        },
                        AluOp::SubC => {
                            add.op = AdderOp::SubC;

                            next_result = add.result;
                            next_flags = Flags {
                                carry: add.carry_out,
                                zero: (add.result == 0) & flags.zero,
                                sign: add.sign,
                                overflow: add.overflow,
                            };
                            next_state = AluState::Ready;
                        },
                        AluOp::Mul => {
                            mul.op = MultOp::MulUU;

                            next_result = mul.result[0..32];
                            next_flags.zero = mul.result[0..32] == 0;
                            next_state = AluState::Ready;
                        },
                        AluOp::MulHuu => {
                            mul.op = MultOp::MulUU;

                            next_result = mul.result[32..64];
                            next_flags.zero = (mul.result[32..64] == 0) & flags.zero;
                            next_state = AluState::Ready;
                        },
                        AluOp::MulHss => {
                            mul.op = MultOp::MulSS;

                            next_result = mul.result[32..64];
                            next_flags.zero = (mul.result[32..64] == 0) & flags.zero;
                            next_state = AluState::Ready;
                        },
                        AluOp::MulHus => {
                            mul.op = MultOp::MulUS;

                            next_result = mul.result[32..64];
                            next_flags.zero = (mul.result[32..64] == 0) & flags.zero;
                            next_state = AluState::Ready;
                        },
                        AluOp::Divu | AluOp::Remu => {
                            next_counter = 31;
                            next_numerator = lhs;
                            next_denominator = rhs;
                            next_quotient = 0;
                            next_remainder = 0;

                            next_state = AluState::DivShift;
                        },
                        AluOp::Divs | AluOp::Rems => {
                            next_counter = 31;
                            next_numerator = if lhs[31] { -lhs } else { lhs };
                            next_denominator = if rhs[31] { -rhs } else { rhs };
                            next_quotient = 0;
                            next_remainder = 0;

                            next_state = AluState::DivShift;
                        },
                        AluOp::Cond => {
                            next_result = if cond.conditional { rhs } else { lhs };
                            next_state = AluState::Ready;
                        },
                    }
                }
            },
            AluState::DivShift => {
                next_counter = counter - 1;
                next_numerator = numerator << 1;
                if (remainder[0..31] @ numerator[31]) >= denominator {
                    next_quotient = quotient[0..31] @ (1 as bit);
                    next_remainder = (remainder[0..31] @ numerator[31]) - denominator;
                } else {
                    next_quotient = quotient[0..31] @ (0 as bit);
                    next_remainder = remainder[0..31] @ numerator[31];
                }

                next_state = if counter == 0 {
                    AluState::DivFinalize
                } else {
                    AluState::DivShift
                };
            },
            AluState::DivFinalize => {
                next_result = match op {
                    AluOp::Divu => quotient,
                    AluOp::Divs => if lhs[31] ^ rhs[31] { -quotient } else { quotient },
                    AluOp::Remu => remainder,
                    AluOp::Rems => if lhs[31] { -remainder } else { remainder },
                    _ => 0xFFFFFFFF, // illegal
                };
                next_state = AluState::Ready;
            },
        }
    }
}
